package hh_school;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.NavigableMap;
import java.util.TreeMap;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 * 
 * @author Pavel Troshenkov | Closest pair
 * 
 * Algorithm is based on "A Simple Randomized Sieve algorithm for the closest pair problem" (S.Khuller, https://www.cs.umd.edu/~samir/grant/cp.pdf )
 * Expected complexity - O(n).
 * 
 * Steps:
 * 1) Pick a random point from the initial set S and find a distance from it to its closest point => d(x). Save d(x) to a list D
 * 2) Build a mesh of size delta(x)=d(x)/3,delta(y)=d(y)/3
 * 3) Delete all points with no neighbors from S => then we get S(i)
 * 4) Go back to step 1 while we don't get S(i*+1)=empty
 * 5) If S(i*+1)=empty, go to previous set S(i*) and find the closest distance d(x) between residuary points. Save d(x) to D
 * 6) Find the real closest pair distance in D
 *
 */

/* 
* As an input the .csv file is used ( two columns, one is X axis, the other is Y axis)
*/

/**
 * Data processing - class with functions to process data in each i-th iteration
 * from S = (all points) to S(i*+1)=empty
 */

class data_processing {

	/**
	 * Calculates the square value of input
	 * 
	 * @param d
	 *            takes a value to calculate a square
	 * @return square value
	 */
	public static double sqr(double d) {

		return d * d;
	}

	/**
	 * Calculates the square of distance between two point
	 * 
	 * @param X1
	 *            x coordinate of the first point
	 * @param X2
	 *            y coordinate of the second point
	 * @param Y1
	 *            y coordinate of the first point
	 * @param Y2
	 *            y coordinate of the second point
	 * @return a square distance between two points
	 */

	public static double sqr_distance(double X1, double X2, double Y1, double Y2) {

		double sqr_distance = sqr(X1 - X2) + sqr(Y1 - Y2);

		return sqr_distance;
	}

	/**
	 * Pick up a random point from the set
	 * 
	 * @param a
	 *            hashmap with a set of points
	 * @return a random point key tp find it then in the initial set
	 */

	static double get_random_point(HashMap<Double, double[]> a) {

		Random generator = new Random();
		List<Double> keys = new ArrayList<Double>(a.keySet());
		Double randomKey = keys.get(generator.nextInt(keys.size()));
		return randomKey;

	}

	/**
	 * Search for min X value in a set
	 * 
	 * @param a
	 *            hashmap to analyze
	 * @return min X value
	 */

	Double Xmin_hashmap(HashMap<Double, double[]> a) {

		Entry<Double, double[]> min = null;
		for (Entry<Double, double[]> entry : a.entrySet()) {
			if (min == null || (min.getValue()[0] > entry.getValue()[0])) {
				min = entry;
			}
		}

		return min.getValue()[0];

	}

	/**
	 * Search for min Y value in a set
	 * 
	 * @param a
	 *            hashmap to analyze
	 * @return min Y value
	 */

	Double Ymin_hashmap(HashMap<Double, double[]> a) {
		Entry<Double, double[]> min = null;
		for (Entry<Double, double[]> entry : a.entrySet()) {
			if (min == null || (min.getValue()[1] > entry.getValue()[1])) {
				min = entry;
			}
		}

		return min.getValue()[1];

	}

	/**
	 * Search for max X value in a set
	 * 
	 * @param a
	 *            hashmap to analyze
	 * @return max X value
	 */

	Double Xmax_hashmap(HashMap<Double, double[]> a) {

		Entry<Double, double[]> max = null;
		for (Entry<Double, double[]> entry : a.entrySet()) {
			if (max == null || (max.getValue()[0] < entry.getValue()[0])) {
				max = entry;
			}
		}
		return max.getValue()[0];

	}

	/**
	 * Search for max Y value in a set
	 * 
	 * @param a
	 *            hashmap to analyze
	 * @return max Y value
	 */

	Double Ymax_hashmap(HashMap<Double, double[]> a) {
		Entry<Double, double[]> max = null;
		for (Entry<Double, double[]> entry : a.entrySet()) {
			if (max == null || (max.getValue()[1] < entry.getValue()[1])) {
				max = entry;
			}
		}

		return max.getValue()[1];

	}

	/**
	 * Key algorithm. By flooring function, divide the plane into cells with
	 * d(x)-scale and then delete all points that are alone in the cell
	 * 
	 * @param a
	 *            hashmap to analyze
	 * @param closest_distance
	 *            Distance to the closest pair from randomly picked up point
	 * @return hashmap with deleted point that are alone in its neighborhood
	 */

	HashMap<Double, double[]> refine_dataset(HashMap<Double, double[]> a,
			double closest_distance) {

		// mesh step - closest distance to a closest_distance with factor 3
		// approximation
		double search_mesh = (Math.sqrt(closest_distance) / 3);

		// map for X axis
		NavigableMap<Double, Integer> X = new TreeMap<Double, Integer>();

		// we start with a cell for a point with minimal X coordinate
		double X_start = Xmin_hashmap(a) - (search_mesh);

		// we end with a point with a maximal X coordinate
		double X_end = Xmax_hashmap(a) + (search_mesh);

		int i = 0;

		while (X_start < X_end) {
			X.put(X_start, i);
			X_start = X_start + search_mesh;
			i++;

		}

		// map for Y axis
		NavigableMap<Double, Integer> Y = new TreeMap<Double, Integer>();

		// we start with a cell for a point with minimal Y coordinate
		double Y_start = Ymin_hashmap(a) - (search_mesh);

		// we end with a point with a maximal Y coordinate
		double Y_end = Ymax_hashmap(a) + (search_mesh);

		int j = 0;

		while (Y_start < Y_end) {
			Y.put(Y_start, j);
			Y_start = Y_start + search_mesh;
			j++;

		}

		Iterator<HashMap.Entry<Double, double[]>> iterXY = a.entrySet()
				.iterator();

		// hashmap where we put point keys to each floor. Idea => one point at
		// the floor => then delete

		HashMap<String, ArrayList<Double>> mesh = new HashMap<String, ArrayList<Double>>();

		while (iterXY.hasNext()) {
			HashMap.Entry<Double, double[]> entry = iterXY.next();

			double X_floor_key;

			if (X.floorKey(entry.getValue()[0]) == null) {
				X_floor_key = X_start;
			}

			else {

				X_floor_key = X.floorKey(entry.getValue()[0]);
			}

			double Y_floor_key;

			if (Y.floorKey(entry.getValue()[1]) == null) {
				Y_floor_key = Y_start;
			} else {

				Y_floor_key = Y.floorKey(entry.getValue()[1]);
			}

			// floor index by X axis
			String mesh_key1 = String.valueOf(X_floor_key);

			// floor index by Y axis
			String mesh_key2 = String.valueOf(Y_floor_key);

			// floor index on the plane ( X & Y )
			String mesh_key = mesh_key1 + mesh_key2 + "floor";

			ArrayList<Double> oldkeys = new ArrayList<Double>();

			// if this floor is already in the mesh hashmap => add the point to
			// existing ones
			if (mesh.get(mesh_key) != null) {

				int k = 0;
				while (k < mesh.get(mesh_key).size()) {
					oldkeys.add(mesh.get(mesh_key).get(k));
					k++;
				}
				oldkeys.add(entry.getKey());
				mesh.put(mesh_key, oldkeys);

			} else {

				// if not, then add as a new single point on the floor
				oldkeys.add(entry.getKey());
				mesh.put(mesh_key, oldkeys);

			}

		}

		Iterator<HashMap.Entry<String, ArrayList<Double>>> iterMESH = mesh
				.entrySet().iterator();

		// Now we have 'mesh' map with points on floors. Now we are determining
		// which floors contain only one floor and put them into a list with all
		// keys of point to be deleted

		ArrayList<Double> indexes_remove = new ArrayList<Double>();

		while (iterMESH.hasNext()) {
			HashMap.Entry<String, ArrayList<Double>> entryMESH = iterMESH
					.next();

			// if only one point at the floor => then delete
			if (entryMESH.getValue().size() == 1) {

				indexes_remove.add(entryMESH.getValue().get(0));

			}
		}

		int l = 0;
		while (l < indexes_remove.size()) { // remove single points

			a.remove(indexes_remove.get(l));

			l++;

		}

		return a;

	}

	/**
	 * Calculates the distance to the closest pair from a randomly picked up
	 * point
	 * 
	 * @param a
	 *            hashmap to analyze
	 * @return distance to the closest pair from a random point
	 * @throws FileNotFoundException
	 */

	Double closest_distance_to_random_point(HashMap<Double, double[]> a)
			throws FileNotFoundException {

		// here we save square distances to the random point
		HashMap<Double, Double> sq_distances = new HashMap<Double, Double>();

		double random_point_key = get_random_point(a); // picking a random point
		// X random poit
		double coord_random_point_X = a.get(random_point_key)[0];
		// Y random point
		double coord_random_point_Y = a.get(random_point_key)[1];
		Iterator<HashMap.Entry<Double, double[]>> iter = a.entrySet()
				.iterator();
		while (iter.hasNext()) { // iterating hashmap to find distances to the
									// chosen random point
			HashMap.Entry<Double, double[]> entry = iter.next();
			double distance = sqr((entry.getValue()[0] - coord_random_point_X))
					+ sqr((entry.getValue()[1] - coord_random_point_Y));
			if (distance > 0) {
				sq_distances.put(entry.getKey(), distance);
			}
		}

		Entry<Double, Double> min = null;

		// iterating hashmap with distances to find the closest pair
		for (Entry<Double, Double> entry : sq_distances.entrySet()) {
			if (min == null || min.getValue() > entry.getValue()) {
				min = entry;
			}
		}
		return min.getValue();

	}

	/**
	 * Calculate closest pair for each point in S(i*+1) set. We apply only at
	 * the final stage where just several point remained
	 * 
	 * @param a
	 *            hashmap to be analyzed
	 * @return closest pair distance
	 */

	double real_closest_distance(HashMap<Double, double[]> a) {

		Iterator<HashMap.Entry<Double, double[]>> iter = a.entrySet()
				.iterator();
		// here we will save the closest distance for each point
		HashMap<Double, Double> distances = new HashMap<Double, Double>();

		while (iter.hasNext()) {

			ArrayList<Double> closest_neighbors = new ArrayList<Double>();
			Iterator<HashMap.Entry<Double, double[]>> iter2 = a.entrySet()
					.iterator();
			HashMap.Entry<Double, double[]> entry = iter.next();

			while (iter2.hasNext()) {

				HashMap.Entry<Double, double[]> entry2 = iter2.next();

				// condition so that we will not calculate the distance of point
				// to itself
				if (entry.getKey() != entry2.getKey()) {

					double distance = sqr_distance(entry.getValue()[0],
							entry2.getValue()[0], entry.getValue()[1],
							entry2.getValue()[1]);

					// distances to each point in the input dataset in the input
					// dataset for currently iterating point
					closest_neighbors.add(distance);
					double min = closest_neighbors.get(0);
					int i = 0;

					// looking for the closest pair for currently iterating
					// point in the hashmap
					while (i < closest_neighbors.size()) {

						double closest = closest_neighbors.get(i);

						if (min > closest) {
							min = closest;
						}
						i++;
					}

					distances.put(entry.getKey(), min);
				}

			}
		}

		// look for the closest pair among points between previously determined
		// nearest neighbors

		Entry<Double, Double> min_final = null;
		for (Entry<Double, Double> entry : distances.entrySet()) {
			if (min_final == null || min_final.getValue() > entry.getValue()) {
				min_final = entry;
			}
		}

		return min_final.getValue();

	}

}

/**
 * filtering - realizes Steps 1-6 in our algorithm
 */

class filtering extends data_processing {

	/**
	 * 
	 * @param a
	 *            Initial hashmap with points from the file
	 * @return closest pair distance
	 * @throws FileNotFoundException
	 */

	Double iterate(HashMap<Double, double[]> a) throws FileNotFoundException {

		double closest_distance = 0; // a pre-set for the closest pair to randomly chosen one

		// here we will be saving pair for random points and for S(i*+1) set
		List<Double> distances = new ArrayList<Double>();

		// here we will save S(i*+1) set
		HashMap<Double, double[]> b = new HashMap<Double, double[]>();
		while (!a.isEmpty()) {

			HashMap<Double, double[]> c = new HashMap<Double, double[]>(a);
			b = c;
			// Step 1: closest pair for a randomly chosen point
			closest_distance = closest_distance_to_random_point(a);
			// Steps 2-3: build a mesh flooring and remove single points
			a = refine_dataset(a, closest_distance);
			// Step 4: go to step 1
			distances.add(closest_distance);

		}
		// Step 5: S(i*+1_) = empty => real closest pair for S(i*+1) set
		distances.add(real_closest_distance(b));

		int i = 0;
		double min_dist = 0;
		// Step 6: iterating within a list with saved distances to find closest
		// pair
		while (i < distances.size()) {
			if (min_dist > distances.get(i) || min_dist == 0) {
				min_dist = distances.get(i);
			}
			i++;
		}
		return Math.sqrt(min_dist);
	}

}

@SuppressWarnings("serial")
public class Closest_pair extends JFrame {

	/**
	 * Takes a selected .csv file with points
	 * 
	 * @param selectedFile
	 *            Selected file
	 * @return hashmap
	 * @throws FileNotFoundException
	 */
	static HashMap<Double, double[]> FileToHashMap(File selectedFile)
			throws FileNotFoundException { // put file
		// data to
		// hashmap

		Scanner in = new Scanner(selectedFile); // read the file
		HashMap<Double, double[]> points = new HashMap<Double, double[]>();
		while (in.hasNext()) {
			String[] PointsAsString = in.nextLine().split(";");
			double key = (Double.parseDouble(PointsAsString[0]) + Double
					.parseDouble(PointsAsString[1]));
			double[] coordinates = { Double.parseDouble(PointsAsString[0]),
					Double.parseDouble(PointsAsString[1]) };
			points.put(key, coordinates);

		}
		in.close();
		return points;
	}

	/**
	 * Form to select a file with points
	 */
	public Closest_pair() {

		super("Please, select .csv file with points");
		setBounds(100, 100, 200, 200); 
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
	}

	public static void main(String[] args) throws FileNotFoundException,
			NullPointerException {

		long startTime = System.currentTimeMillis();

		// choose a file
		Closest_pair app = new Closest_pair();
		final JFileChooser fileChooser = new JFileChooser();
		fileChooser.setCurrentDirectory(new File(System
				.getProperty("user.home")));
		int result = fileChooser.showOpenDialog(app);

		File selectedFile = fileChooser.getSelectedFile();
		filtering a = new filtering(); // Initialize the filtering process

		try {
			System.out.println("The closest distance between points is: "
					+ a.iterate(FileToHashMap(selectedFile)));
		} catch (FileNotFoundException | NullPointerException e) {
			System.out.println("There is no file to process ! ");
			System.exit(0);
		}

		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		System.out.println("Time elapsed, ms: " + elapsedTime);
		System.exit(0);
	}

}
